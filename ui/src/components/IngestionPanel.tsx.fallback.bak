import React, { useEffect, useState } from 'react';
import { runIngestion, getStatus } from '../lib/api';

export default function IngestionPanel() {
  const [symbols, setSymbols] = useState<string>('BTC/USDT,ETH/USDT');
  const [timeframes, setTimeframes] = useState<string>('1m');
  const [runId, setRunId] = useState<string | null>(null);
  const [message, setMessage] = useState<string>('');
  const [percent, setPercent] = useState<number>(0);

  async function handleStart() {
    try {
      const payload = {
        symbols: symbols.split(',').map(s => s.trim()).filter(Boolean),
        timeframes: timeframes.split(',').map(s => s.trim()).filter(Boolean),
        start_ts: null,
        end_ts: null
      };
      const res = await runIngestion(payload);
      // Expecting: { ok: true, job_id, run_id, count }
      setRunId(res.run_id || null);
      setMessage(res?.run_id ? \Run started: \ (pairs: \ )\ : 'Ingestion started');
    } catch (e:any) {
      setMessage(\Failed: \\);
    }
  }

  useEffect(() => {
    if (!runId) return;
    const t = setInterval(async () => {
      try {
        const s = await getStatus();
        // if backend surfaces latest run snapshot under s.run
        if (s?.run?.run_id === runId) {
          const pctRaw = Number(s.run.percent ?? 0);
          setPercent(Number.isFinite(pctRaw) ? pctRaw : 0);
        }
      } catch { /* ignore poll errors */ }
    }, 1500);
    return () => clearInterval(t);
  }, [runId]);

  return (
    <div className="p-4 border rounded-xl space-y-3">
      <div className="flex gap-2">
        <input
          className="border p-2 flex-1"
          value={symbols}
          onChange={e => setSymbols(e.target.value)}
          placeholder="BTC/USDT,ETH/USDT"
        />
        <input
          className="border p-2 w-40"
          value={timeframes}
          onChange={e => setTimeframes(e.target.value)}
          placeholder="1m,5m"
        />
        <button className="px-4 py-2 rounded-lg border" onClick={handleStart}>
          Start Ingestion
        </button>
      </div>
      {message && <div className="text-sm">{message}</div>}
      {runId && <div className="text-sm">Run: <span className="font-mono">{runId}</span> — Progress: {percent}%</div>}
    </div>
  );
}
