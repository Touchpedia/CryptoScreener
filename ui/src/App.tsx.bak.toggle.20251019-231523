import React, { useEffect, useState } from "react";

type Row = {
  symbol: string;
  total_required?: number;
  received?: number;
  latest_ts?: string | null;
};

// number inputs sanitization (no leading zeros, clamp)
function normalizeInt(input: string, min: number, max: number): number {
  const digits = (input ?? "").replace(/[^\d]/g, "");
  const noLead = digits.replace(/^0+(?=\d)/, "");
  const chosen = noLead === "" ? "0" : noLead;
  const n = parseInt(chosen, 10);
  if (Number.isNaN(n)) return min;
  return Math.min(max, Math.max(min, n));
}

// UTC -> Local machine time, safe for undefined
function toLocal(ts?: string | null) {
  if (!ts || ts === "-") return "-";
  // Some DBs return with "+00:00"; Date handles ISO fine.
  const d = new Date(ts);
  if (isNaN(d.getTime())) return ts; // fallback if parse fails
  return d.toLocaleString(); // local PC time
}

export default function App() {
  // ===== Ingestion Settings =====
  const [topSymbols, setTopSymbols] = useState<number>(10);
  const [interval, setIntervalTf] = useState<string>("1m");
  const [candlesPerSymbol, setCandlesPerSymbol] = useState<number>(6000);
  const [starting, setStarting] = useState<boolean>(false);
  const [startMsg, setStartMsg] = useState<string>("");

  // ===== Coverage Data =====
  const [rows, setRows] = useState<Row[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);

  async function loadCoverage() {
    try {
      setLoading(true);
      // cache-bust via query param + no-store to avoid any layer caching
      const res = await fetch(`/api/report/coverage?t=${Date.now()}`, { cache: "no-store" });
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const data = await res.json();
      setRows(Array.isArray(data) ? data : (data?.rows ?? []));
      setLastRefresh(new Date());
    } catch (e) {
      console.error(e);
    } finally {
      setLoading(false);
    }
  }

  async function startIngestion() {
    try {
      setStarting(true);
      setStartMsg("");
      const payload = {
        top_symbols: topSymbols,
        interval: interval,
        candles_per_symbol: candlesPerSymbol
      };
      const res = await fetch("/api/ingestion/run", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      });
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const data = await res.json().catch(() => ({}));
      setStartMsg(data?.message ?? "Ingestion triggered.");
    } catch (err: any) {
      console.error(err);
      setStartMsg(err?.message ?? "Failed to start ingestion");
    } finally {
      setStarting(false);
    }
  }

  // Auto refresh coverage every 10s (lightweight)
  useEffect(() => {
    loadCoverage();
    const id = window.setInterval(loadCoverage, 10000);
    return () => window.clearInterval(id);
  }, []);

  // Flush DB button action
  async function flushDb() {
    if (!confirm("Flush all candles data?")) return;
    const res = await fetch("/api/db/flush", { method: "POST" });
    const data = await res.json().catch(() => ({}));
    alert(data?.message ?? "DB flush requested.");
    // after flush, reload coverage to show empty state quickly
    loadCoverage();
  }

  return (
    <div style={{ padding: 16, fontFamily: "Inter, system-ui, Arial, sans-serif" }}>
      <h2 style={{ marginBottom: 12 }}>CryptoScreener</h2>

      {/* ===== Ingestion Settings Panel ===== */}
      <div style={{ border: "1px solid #e5e7eb", borderRadius: 10, padding: 12, marginBottom: 14 }}>
        <h3 style={{ margin: "0 0 10px 0" }}>Ingestion Settings</h3>

        <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr 1fr auto", gap: 10, alignItems: "end" }}>
          <div>
            <label style={{ display: "block", fontSize: 12, color: "#6b7280", marginBottom: 4 }}>
              Top Symbols (count)
            </label>
            <input
              type="number" min={1} max={100}
              value={String(topSymbols)}
              onChange={(e) => setTopSymbols(normalizeInt(e.target.value, 1, 100))}
              onBlur={(e) => setTopSymbols(normalizeInt(e.target.value, 1, 100))}
              style={{ width: "100%", padding: "6px 8px", border: "1px solid #d1d5db", borderRadius: 6 }}
            />
          </div>

          <div>
            <label style={{ display: "block", fontSize: 12, color: "#6b7280", marginBottom: 4 }}>
              Interval (timeframe)
            </label>
            <select
              value={interval}
              onChange={(e) => setIntervalTf(e.target.value)}
              style={{ width: "100%", padding: "6px 8px", border: "1px solid #d1d5db", borderRadius: 6 }}
            >
              <option value="1m">1m</option>
              <option value="5m">5m</option>
              <option value="15m">15m</option>
              <option value="1h">1h</option>
              <option value="4h">4h</option>
              <option value="1d">1d</option>
            </select>
          </div>

          <div>
            <label style={{ display: "block", fontSize: 12, color: "#6b7280", marginBottom: 4 }}>
              Candles per Symbol
            </label>
            <input
              type="number" min={1} max={100000}
              value={String(candlesPerSymbol)}
              onChange={(e) => setCandlesPerSymbol(normalizeInt(e.target.value, 1, 100000))}
              onBlur={(e) => setCandlesPerSymbol(normalizeInt(e.target.value, 1, 100000))}
              style={{ width: "100%", padding: "6px 8px", border: "1px solid #d1d5db", borderRadius: 6 }}
            />
          </div>

          <div>
            <button
              onClick={startIngestion}
              disabled={starting}
              style={{ padding: "8px 12px", border: "1px solid #d1d5db", borderRadius: 8, whiteSpace: "nowrap" }}
            >
              {starting ? "Starting..." : "Start Ingestion"}
            </button>
          </div>
        </div>

        {startMsg && (
          <div style={{ marginTop: 8, fontSize: 12, color: "#374151" }}>
            {startMsg}
          </div>
        )}
      </div>

      {/* ===== Flush & Coverage ===== */}
      <div style={{ marginTop: 6 }}>
        <div style={{ marginBottom: 8 }}>
          <button onClick={loadCoverage} disabled={loading}
            style={{ padding: "6px 10px", border: "1px solid #d1d5db", borderRadius: 6 }}>
            {loading ? "Loading..." : "Refresh"}
          </button>

          <button onClick={flushDb}
            style={{ marginLeft: 10, padding: "6px 10px", border: "1px solid #d1d5db", borderRadius: 6 }}>
            🔄 Flush DB
          </button>

          <span style={{ marginLeft: 12, fontSize: 12, color: "#6b7280" }}>
            {lastRefresh ? `Last refresh: ${lastRefresh.toLocaleTimeString()}` : ""}
          </span>
        </div>

        <h3 style={{ margin: "0 0 8px 0" }}>
          Coverage Report — Top (USDT), {interval}, last {candlesPerSymbol}
        </h3>

        <div style={{ overflowX: "auto" }}>
          <table style={{ width: "100%", borderCollapse: "collapse", marginTop: 2 }}>
            <thead>
              <tr style={{ borderBottom: "1px solid #e5e7eb" }}>
                <th style={{ textAlign: "left",  padding: "8px 6px"        }}>Symbol</th>
                <th style={{ textAlign: "right", padding: "8px 6px", width: 160 }}>Total Required</th>
                <th style={{ textAlign: "right", padding: "8px 6px", width: 110 }}>Received</th>
                <th style={{ textAlign: "left",  padding: "8px 6px 8px 18px", width: 230 }}>Latest&nbsp;TS (local)</th>
              </tr>
            </thead>
            <tbody>
              {rows.map((r) => (
                <tr key={r.symbol} style={{ borderBottom: "1px solid #f3f4f6" }}>
                  <td style={{ padding: "8px 6px" }}>{r.symbol}</td>
                  <td style={{ textAlign: "right", padding: "8px 6px" }}>{r.total_required ?? candlesPerSymbol}</td>
                  <td style={{ textAlign: "right", padding: "8px 6px" }}>{r.received ?? 0}</td>
                  <td style={{ padding: "8px 6px 8px 18px", whiteSpace: "nowrap" }}>{toLocal(r.latest_ts ?? "-")}</td>
                </tr>
              ))}
              {rows.length === 0 && (
                <tr><td colSpan={4} style={{ padding: 12, color: "#6b7280" }}>No rows. Click “Refresh”.</td></tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
