import { useState, useEffect } from "react";

type CoverageRow = { symbol:string; total_required?:number; received?:number; latest_ts?:number };

export default function App() {
  const [topSymbols, setTopSymbols] = useState(10);
  const [interval, setIntervalTf] = useState("1m");
  const [candlesPerSymbol, setCandlesPerSymbol] = useState(6000);
  const [rows, setRows] = useState<CoverageRow[]>([]);
  const [loading, setLoading] = useState(false);
  const [ingesting, setIngesting] = useState(false);
  const [starting, setStarting] = useState(false);
  const [msg, setMsg] = useState<string>("");

  async function startIngestion() {
    try {
      setStarting(true);
      // Call backend with symbols/timeframes so response is meaningful (message/run linkage)
      const body = {
        symbols: ["BTC/USDT", "ETH/USDT"],         // minimal seed; worker expands list on server
        timeframes: [interval],
        start_ts: null,
        end_ts: null,
      };
      const r = await fetch("/api/ingestion/run", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });
      const j = await r.json().catch(() => ({}));
      // Backend usually returns { message, symbols, ... } — surface it to user
      setMsg(j?.message ? String(j.message) : "Ingestion started");
      setIngesting(true);
      // Kick an early refresh after a short delay
      setTimeout(loadCoverage, 1500);
    } catch (e:any) {
      setMsg(e?.message || "Failed to start ingestion");
    } finally {
      setStarting(false);
    }
  }

  async function stopIngestion() {
    try {
      setStarting(true);
      await fetch("/api/ingestion/stop", { method: "POST" });
      setIngesting(false);
      setMsg("Ingestion stop requested");
    } catch {
      setMsg("Failed to stop ingestion");
    } finally {
      setStarting(false);
    }
  }

  async function loadCoverage() {
    try {
      setLoading(true);
      // FIX: duplicate params were appended; keep a clean query
      const url = `/api/report/coverage?timeframe=${interval}&window=${candlesPerSymbol}&limit=${topSymbols}&t=${Date.now()}`;
      const r = await fetch(url);
      const j = await r.json();
      setRows(Array.isArray(j) ? j : j?.rows ?? []);
    } catch {
      setRows([]);
    } finally {
      setLoading(false);
    }
  }

  // Keep periodic refresh for table
  useEffect(() => {
    loadCoverage();
    const id = setInterval(() => {
      loadCoverage();
    }, 10000);
    return () => clearInterval(id);
  }, [interval, candlesPerSymbol, topSymbols]);

  return (
    <div style={{ padding: 20, fontFamily: "Inter, sans-serif" }}>
      <h2 style={{ marginBottom: 10 }}>CryptoScreener</h2>

      {/* Status/Message bar */}
      {msg ? (
        <div style={{ marginBottom: 10, padding: 10, border: "1px solid #e5e7eb", borderRadius: 8, background: "#f8fafc" }}>
          {msg}
        </div>
      ) : null}

      <div style={{ border: "1px solid #e5e7eb", borderRadius: 10, padding: 12, marginBottom: 14 }}>
        <h3>Ingestion Settings</h3>
        <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr 1fr auto", gap: 10, alignItems: "end" }}>
          <div>
            <label>Top Symbols</label>
            <input type="number" value={topSymbols} onChange={(e) => setTopSymbols(+e.target.value)}
              style={{ width: "100%", border: "1px solid #ccc", borderRadius: 6, padding: 6 }}/>
          </div>
          <div>
            <label>Interval</label>
            <select value={interval} onChange={(e) => setIntervalTf(e.target.value)}
              style={{ width: "100%", border: "1px solid #ccc", borderRadius: 6, padding: 6 }}>
              <option value="1m">1m</option>
              <option value="5m">5m</option>
              <option value="1h">1h</option>
            </select>
          </div>
          <div>
            <label>Candles per Symbol</label>
            <input type="number" value={candlesPerSymbol} onChange={(e) => setCandlesPerSymbol(+e.target.value)}
              style={{ width: "100%", border: "1px solid #ccc", borderRadius: 6, padding: 6 }}/>
          </div>
          <button
            onClick={async () => {
              if (ingesting) {
                await stopIngestion();
              } else {
                await startIngestion();
              }
            }}
            style={{
              background: starting ? "#facc15" : ingesting ? "#ef4444" : "#22c55e",
              color: "#fff", padding: "8px 14px", borderRadius: 8, border: "none",
            }}
          >
            {starting ? "Starting..." : ingesting ? "Stop Ingestion" : "Start Ingestion"}
          </button>
        </div>
      </div>

      <div style={{ display: "flex", gap: 8, marginBottom: 10 }}>
        <button onClick={loadCoverage} disabled={loading}
          style={{ border: "1px solid #ccc", borderRadius: 8, padding: "8px 14px" }}>
          {loading ? "Loading..." : "Refresh"}
        </button>
        <button onClick={async () => { await stopIngestion(); }} style={{ background:"#ef4444", color:"#fff", padding:"8px 14px", borderRadius:8, border:"none" }}>
          Stop Ingestion
        </button>
      </div>

      <table style={{ width: "100%", borderCollapse: "collapse" }}>
        <thead>
          <tr style={{ borderBottom: "1px solid #e5e7eb" }}>
            <th align="left" style={{ padding: 6 }}>Symbol</th>
            <th align="right" style={{ padding: 6 }}>Total Required</th>
            <th align="right" style={{ padding: 6 }}>Received</th>
            <th align="left" style={{ padding: 6 }}>Latest TS</th>
          </tr>
        </thead>
        <tbody>
          {rows.map((r) => (
            <tr key={r.symbol} style={{ borderBottom: "1px solid #f3f4f6" }}>
              <td style={{ padding: 6 }}>{r.symbol}</td>
              <td align="right" style={{ padding: 6 }}>{r.total_required ?? candlesPerSymbol}</td>
              <td align="right" style={{ padding: 6 }}>{r.received ?? 0}</td>
              <td style={{ padding: 6 }}>
                {r.latest_ts ? new Date(r.latest_ts).toLocaleString([], { timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone }) : "-"}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

